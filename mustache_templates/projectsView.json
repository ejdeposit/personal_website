{
    "projects": [
        {
        "image":"<a href=\"https://state-covid-comparisons.herokuapp.com/\"><img src=\"./img/covid-tracker.png\" width=\"325px\"/></a>",
        "title":"State Covid Tracker",
        "stack":"Javascript, CSS, Node.js, Express",
        "content":"I created this project as states were beginning to attempt to reopen from Covid-19 shut downs in spring of 2020. I wanted to create a way to compare covid cases numbers between states to analyze the affect reopening descisions were having. I wanted to gain more competency with CSS, so I kept the tech stack to a minimum, rather than rely frameworks, such as Bootstrap. It started out as a single page web application, but later I added an Express backend to conform to the same-origin policy.",
        "site":"<a href=\"https://state-covid-comparisons.herokuapp.com\">Site</a>",
        "git":"<a href=\"https://github.com/ejdeposit/frontend-project\"><i class=\"fa fa-github\"></i></a>"
        },
        {
        "image": "<a href=\"https://www.pixamed.com/\"><img src=\"./img/pixamed.png\" width=\"200px\"/></a>",
        "title": "Full Stack Developer Internship, Pixameter",
        "stack": "Javascript, CSS, Node.js, Express, MongoDB, Bootstrap, Jquery",
        "content": "In the summer of 2020 I worked as full-stack developer at Pixameter, a small start-up specializing in wound measurement and tele-medicine software. I developed front-end and back-end services to allow patients to share health information with their medical providers through a new tele-medicine web application. I was also able to design and implement a brand new service to the web application where I Integrated Google Cloud services, including the Maps API, to allow users to find nearby pharmaceutical services.",
        "site": "<a href=\"https://www.pixamed.com/\">Site</a>",
        "git":""
        },
        {
        "image": "<a href=\"https://img-alt-generator.wm.r.appspot.com\"><img src=\"./img/vision-api.svg\" alt=\"cloud vision logo\" width=\"250px\"></a>",
        "title": "Accessible Image Generator",
        "stack": "Python; Flask; Google Cloud: App App Engine, Vision API, Datastore",
        "content": "Created a Flask web application on Google Cloud’s App Engine utilizing Google’s Vision API to automatically generate accessible HMTL image tags for uploaded photos in Cloud Storage.",
        "site": "<a href=\"https://img-alt-generator.wm.r.appspot.com\">Site</a>",
        "git":"<a href=\"https://bitbucket.org/edeposit/cloud-img-alt-generator/src/master/\"><i class=\"fa fa-github\"></i></a>"
        },
        {
        "image": "<img src=\"./img/starBattleSolSq.jpg\" alt=\"star battle puzzle\" width=\"200px\">",
        "title": "Star Battle Solver",
        "stack": "Python, PyUnit",
        "content": "Similar to Sudoku, the puzzle board is divided into regions where each region, row, and column can contain no more than two stars and stars may not be placed adjacently. I implemented the AC-3 constraint satisfaction algorithm to solve these puzzles.  The AC-3 algorithm uses a back-tracking search.  At each step a feasible move is attempted, then any moves that are no longer feasible are eliminated.  Additionally, checks occur to make sure that the board is not impossible to solve given the current configuration. If it is, it backtracks to the last move and tries an alternative feasible star placement.",
        "site": "",
        "git":"<a href=\"https://github.com/tollesonpdx/TwoNotTouch_StarBattle\"><i class=\"fa fa-github\"></i></a>"
        },
        {
        "image": "<img src=\"./img/phone.jpg\" alt=\"phone\" width=\"250px\">",
        "title": "Android Appointment Application",
        "stack": "Java, JUnit, Maven, Gradle",
        "content": "Integrated test-driven development practices into the construction of an Android appointment book application in Java to create, organize, and search for appointments.",
        "site": "",
        "git":"<a href=\"https://github.com/ejdeposit/appt_book_android_app\"><i class=\"fa fa-github\"></i></a>"
        },
        {
        "image": "<img src=\"./img/output_cell_aut_exe.png\" alt=\"cloud vision logo\" width=\"300px\">",
        "title": "Cellular Automata in Haskell",
        "stack": "Haskell, HUnit",
        "content": "Courses, such as Artificial Intelligence and Theory of Computation left me intrigued by the idea of cellular automata and other simple computational models. I created an interactive program in Haskell that allows users to input starting configurations of alive cell and rules to determine which cells reproduce, so they can discover for them selves new intriguing patterns.  This project served as a great learning opportunity to become more fluent coding using functional paradigms and also gave me a solid understanding of language concepts such as the type system, which has helped me understand more fully other strongly typed languages, such as Java. ",
        "site": "",
        "git":"<a href=\"https://github.com/ejdeposit/func_prog_final_proj\"><i class=\"fa fa-github\"></i></a>"
        }
    ]
}
