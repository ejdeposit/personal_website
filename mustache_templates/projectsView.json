{
    "projects": [
        {
        "image":"<a href=\"https://state-covid-comparisons.herokuapp.com/\"><img src=\"./img/covid-tracker.png\" width=\"100%\"/></a>",
        "title":"State Covid Tracker",
        "stack":"Javascript, CSS, Node.js, Express",
        "content":"I created this project as states were beginning to attempt to reopen from Covid-19 shut downs in spring of 2020. I wanted to create a way to compare covid cases numbers between states to analyze the affect reopening descisions were having. I wanted to gain more competency with CSS, so I kept the tech stack to a minimum, rather than rely frameworks, such as bootstrap. It started out as a single page web application, but later I added an Express backend to conform to the same-origin policy.",
        "site":"<a href=\"https://state-covid-comparisons.herokuapp.com\">Site</a>",
        "git":"<a href=\"https://github.com/ejdeposit/frontend-project\"><i class=\"fa fa-github\"></i></a>"
        },
        {
        "image": "<a href=\"https://www.pixamed.com/\"><img src=\"./img/pixamed.png\" width=\"60%\"/></a>",
        "title": "Full Stack Developer Internship, Pixameter",
        "stack": "Javascript, CSS, Node.js, Express, MongoDB, Bootstrap, Jquery",
        "content": "In the summer of 2020 I worked as full-stack developer at Pixameter, a small start-up that specializes in wound measurement and tele-medicine software. I Developed front-end and back-end services to allow patients to share health information with their medical providers through a new telemedicine web application. I was able to design and implement brand new service to the web application where I Integrated Google Cloud services, including the Maps API, to allow users to find nearby pharmaceutical services.",
        "site": "<a href=\"https://www.pixamed.com/\">Site</a>",
        "git":""
        },
        {
        "image": "<img src=\"./img/starBattleSolSq.jpg\" alt=\"star battle puzzle\" width=\"60%\">",
        "title": "Star Battle Solver",
        "stack": "Python, PyUnit",
        "content": "I first encountered Star Battle puzzles in the New York Times where they were printed under the name Two Not Touch. The game is not unlike Sudoku. The puzzle board is divided into regions. In each region, row, and column there can be no more than two stars.  Additionally, stars may not be placed adjacently. As I attempted to solve them, I began to wonder if there were some sort of algorithmic shortcut. I implemented the AC-3 constraint satisfaction algorithm to solve these puzzles.  The AC-3 algorithm uses a back-tracking search.  At each step a feasible move is attempted.  To prune the decision tree down a bit, the most constrained choices are attempted first in my implementation. Additionally, at each step, the algorithm looks to eliminates any possible next moves that are no longer feasible and checks to make sure that the board is not impossible to solve given the current configuration. If it is, it backtracks to the last move and tries another feasible star placement.",
        "site": "<a href=\"https://www.pixamed.com/\">Site</a>",
        "git":"<a href=\"https://github.com/tollesonpdx/TwoNotTouch_StarBattle\"><i class=\"fa fa-github\"></i></a>"
        }
    ]
}
